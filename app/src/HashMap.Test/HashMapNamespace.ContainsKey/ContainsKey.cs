// ********RoostGPT********
/*
Test generated by RoostGPT for test amanCsharp using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=ContainsKey_ff9ba6f41f
ROOST_METHOD_SIG_HASH=ContainsKey_60b36cd283

   ########## Test-Scenarios ##########  

Scenario 1: Test when the HashMap64 contains the given key
Details:
  TestName: TestContainsKeyWhenKeyExists
  Description: This test is meant to check the ContainsKey method when the key is present in the HashMap64. 
Execution:
  Arrange: Create a HashMap64 and add a key-value pair.
  Act: Invoke the ContainsKey method with the key that was added to the HashMap64.
  Assert: Check that the method returns true.
Validation:
  The assertion verifies that the ContainsKey method correctly identifies when a key is present in the HashMap64. This test is significant as it confirms the expected behaviour of the ContainsKey method when the key is present.

Scenario 2: Test when the HashMap64 does not contain the given key
Details:
  TestName: TestContainsKeyWhenKeyDoesNotExist
  Description: This test is meant to check the ContainsKey method when the key is not present in the HashMap64. 
Execution:
  Arrange: Create a HashMap64 and add a key-value pair.
  Act: Invoke the ContainsKey method with a key different than the one added to the HashMap64.
  Assert: Check that the method returns false.
Validation:
  The assertion verifies that the ContainsKey method correctly identifies when a key is not present in the HashMap64. This test is significant as it confirms the expected behaviour of the ContainsKey method when the key is not present.

Scenario 3: Test when the HashMap64 is empty
Details:
  TestName: TestContainsKeyWhenHashMap64IsEmpty
  Description: This test is meant to check the ContainsKey method when the HashMap64 is empty. 
Execution:
  Arrange: Create an empty HashMap64.
  Act: Invoke the ContainsKey method with any key.
  Assert: Check that the method returns false.
Validation:
  The assertion verifies that the ContainsKey method correctly identifies when a key is not present in an empty HashMap64. This test is significant as it confirms the expected behaviour of the ContainsKey method when the HashMap64 is empty.

Scenario 4: Test when the HashMap64 contains multiple keys
Details:
  TestName: TestContainsKeyWhenHashMap64HasMultipleKeys
  Description: This test is meant to check the ContainsKey method when the HashMap64 contains multiple keys. 
Execution:
  Arrange: Create a HashMap64 and add multiple key-value pairs.
  Act: Invoke the ContainsKey method with one of the keys added to the HashMap64.
  Assert: Check that the method returns true.
Validation:
  The assertion verifies that the ContainsKey method correctly identifies when a key is present in the HashMap64, even if the HashMap64 contains multiple keys. This test is significant as it checks the correctness of the ContainsKey method in a complex scenario.


*/

// ********RoostGPT********
using System;
using System.Collections.Generic;
using NUnit.Framework;
using HashMapNamespace;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class ContainsKeyTest
    {
        private HashMap64<int> _hashMap;

        [SetUp]
        public void SetUp()
        {
            _hashMap = new HashMap64<int>();
        }

        [Test]
        public void TestContainsKeyWhenKeyExists()
        {
            // Arrange
            long key = 123456789;
            int value = 10;
            _hashMap.Add(key, value);

            // Act
            bool result = _hashMap.ContainsKey(key);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        public void TestContainsKeyWhenKeyDoesNotExist()
        {
            // Arrange
            long key = 123456789;
            int value = 10;
            _hashMap.Add(key, value);

            // Act
            bool result = _hashMap.ContainsKey(key + 1);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        public void TestContainsKeyWhenHashMap64IsEmpty()
        {
            // Arrange
            long key = 123456789;

            // Act
            bool result = _hashMap.ContainsKey(key);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        public void TestContainsKeyWhenHashMap64HasMultipleKeys()
        {
            // Arrange
            long key1 = 123456789;
            int value1 = 10;
            _hashMap.Add(key1, value1);

            long key2 = 987654321;
            int value2 = 20;
            _hashMap.Add(key2, value2);

            // Act
            bool result = _hashMap.ContainsKey(key1);

            // Assert
            Assert.IsTrue(result);
        }
    }
}
