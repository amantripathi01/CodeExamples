// ********RoostGPT********
/*
Test generated by RoostGPT for test amanCsharp using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=Add_8864c1947d
ROOST_METHOD_SIG_HASH=Add_70cf5332c9

   ########## Test-Scenarios ##########  

Scenario 1: Test for successful addition of key-value pair

Details:
  TestName: AddKeyValueTest
  Description: This test will check if the method successfully adds a key-value pair to the hash map. 

Execution:
  Arrange: Create a HashMap64 object and a key-value pair to be added.
  Act: Invoke the Add method with the prepared key-value pair.
  Assert: Use NUnit assertions to verify if the key-value pair was added to the hash map by checking if the key exists in the hash map.

Validation:
  The assertion verifies that the Add method correctly adds a key-value pair to the hash map. This is critical as it confirms the basic functionality of the Add method.

Scenario 2: Test for exception when adding duplicate keys

Details:
  TestName: AddDuplicateKeyTest
  Description: This test will check if the method throws an exception when trying to add a duplicate key.

Execution:
  Arrange: Create a HashMap64 object and add a key-value pair to it. Prepare another value with the same key.
  Act: Invoke the Add method with the duplicate key.
  Assert: Use NUnit assertions to expect an ArgumentException.

Validation:
  The assertion verifies that the Add method correctly throws an exception when a duplicate key is added. This is important to maintain the integrity of the hash map, as hash maps do not allow duplicate keys.

Scenario 3: Test for correct functionality after resizing

Details:
  TestName: AddAfterResizeTest
  Description: This test will check if the Add method works correctly after the hash map was resized.

Execution:
  Arrange: Create a HashMap64 object with a small initial capacity and add key-value pairs to it until it resizes. Prepare another key-value pair to be added.
  Act: Invoke the Add method with the new key-value pair.
  Assert: Use NUnit assertions to verify if the new key-value pair was added to the hash map by checking if the new key exists in the hash map.

Validation:
  The assertion verifies that the Add method still functions correctly after a resize operation. This is important as it ensures the integrity of the hash map when dealing with a large number of elements.

Scenario 4: Test for correct functionality after Clear is called

Details:
  TestName: AddAfterClearTest
  Description: This test will check if the Add method works correctly after the Clear method was called on the hash map.

Execution:
  Arrange: Create a HashMap64 object and add a key-value pair to it. Call the Clear method to empty the hash map. Prepare another key-value pair to be added.
  Act: Invoke the Add method with the new key-value pair.
  Assert: Use NUnit assertions to verify if the new key-value pair was added to the hash map by checking if the new key exists in the hash map.

Validation:
  The assertion verifies that the Add method still functions correctly after the Clear method was called. This is important as it ensures the hash map can be reused after being cleared.


*/

// ********RoostGPT********
using System;
using System.Collections.Generic;
using HashMapNamespace;
using NUnit.Framework;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class AddTest
    {
        private HashMap64<string> hashMap;

        [SetUp]
        public void Setup()
        {
            hashMap = new HashMap64<string>();
        }

        [Test]
        public void AddKeyValueTest()
        {
            long key = 123;
            string value = "Test Value";

            hashMap.Add(key, value);

            Assert.IsTrue(hashMap.ContainsKey(key));
            Assert.AreEqual(value, hashMap[key]);
        }

        [Test]
        public void AddDuplicateKeyTest()
        {
            long key = 123;
            string value1 = "Test Value 1";
            string value2 = "Test Value 2";

            hashMap.Add(key, value1);

            var ex = Assert.Throws<ArgumentException>(() => hashMap.Add(key, value2));
            Assert.That(ex.Message, Is.EqualTo("Given key already exists in the map."));
        }

        [Test]
        public void AddAfterResizeTest()
        {
            for (int i = 0; i < 65; i++)
            {
                hashMap.Add(i, $"Value {i}");
            }

            long key = 123;
            string value = "Test Value";

            hashMap.Add(key, value);

            Assert.IsTrue(hashMap.ContainsKey(key));
            Assert.AreEqual(value, hashMap[key]);
        }

        [Test]
        public void AddAfterClearTest()
        {
            long key1 = 123;
            string value1 = "Test Value 1";

            hashMap.Add(key1, value1);
            hashMap.Clear();

            long key2 = 456;
            string value2 = "Test Value 2";

            hashMap.Add(key2, value2);

            Assert.IsTrue(hashMap.ContainsKey(key2));
            Assert.AreEqual(value2, hashMap[key2]);
        }

        [TearDown]
        public void TearDown()
        {
            hashMap.Clear();
        }
    }
}
