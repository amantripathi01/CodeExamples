// ********RoostGPT********
/*
Test generated by RoostGPT for test amanCsharp using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=ProvideCapacity_dac8fbce51
ROOST_METHOD_SIG_HASH=ProvideCapacity_0106a49c34

   ########## Test-Scenarios ##########  

Scenario 1: ProvideCapacity is called with tempIdCount less than the limitCapacity
Details:
  TestName: ProvideCapacity_LessThanLimitCapacity_NoResize
  Description: This test will ensure that if the ProvideCapacity method is called with a tempIdCount less than the limitCapacity, the Resize method is not called.
Execution:
  Arrange: Create a HashMap64 instance with a known limitCapacity.
  Act: Call ProvideCapacity with a tempIdCount less than the limitCapacity.
  Assert: Verify that the Resize method was not called and the capacity of the HashMap64 instance remains the same.
Validation:
  The assertion verifies that the HashMap64's capacity does not change when the tempIdCount is less than the limitCapacity. This is significant as it confirms the method's correct behaviour when the current capacity is sufficient.

Scenario 2: ProvideCapacity is called with tempIdCount equal to the limitCapacity
Details:
  TestName: ProvideCapacity_EqualToLimitCapacity_NoResize
  Description: This test will ensure that if the ProvideCapacity method is called with a tempIdCount equal to the limitCapacity, the Resize method is not called.
Execution:
  Arrange: Create a HashMap64 instance with a known limitCapacity.
  Act: Call ProvideCapacity with a tempIdCount equal to the limitCapacity.
  Assert: Verify that the Resize method was not called and the capacity of the HashMap64 instance remains the same.
Validation:
  The assertion verifies that the HashMap64's capacity does not change when the tempIdCount equals the limitCapacity. This confirms the method's correct behaviour when the current capacity is exactly sufficient.

Scenario 3: ProvideCapacity is called with tempIdCount greater than the limitCapacity
Details:
  TestName: ProvideCapacity_GreaterThanLimitCapacity_PerformResize
  Description: This test will ensure that if the ProvideCapacity method is called with a tempIdCount greater than the limitCapacity, the Resize method is called.
Execution:
  Arrange: Create a HashMap64 instance with a known limitCapacity.
  Act: Call ProvideCapacity with a tempIdCount greater than the limitCapacity.
  Assert: Verify that the Resize method was called and the capacity of the HashMap64 instance is increased.
Validation:
  The assertion verifies that the HashMap64's capacity increases when the tempIdCount is greater than the limitCapacity. This confirms the method's correct behaviour when the current capacity is insufficient.

Scenario 4: ProvideCapacity is called with a negative tempIdCount
Details:
  TestName: ProvideCapacity_NegativeTempIdCount_NoResize
  Description: This test will ensure that if the ProvideCapacity method is called with a negative tempIdCount, the Resize method is not called.
Execution:
  Arrange: Create a HashMap64 instance with a known limitCapacity.
  Act: Call ProvideCapacity with a negative tempIdCount.
  Assert: Verify that the Resize method was not called and the capacity of the HashMap64 instance remains the same.
Validation:
  The assertion verifies that the HashMap64's capacity does not change when the tempIdCount is negative. This confirms the method's correct behaviour when given an invalid input.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using HashMapNamespace;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class ProvideCapacityTest
    {
        [Test]
        public void ProvideCapacity_LessThanLimitCapacity_NoResize()
        {
            // Arrange
            var hashMap = new HashMap64<int>(10);
            var initialCapacity = hashMap.Capacity;

            // Act
            hashMap.ProvideCapacity(5);

            // Assert
            Assert.AreEqual(initialCapacity, hashMap.Capacity);
        }

        [Test]
        public void ProvideCapacity_EqualToLimitCapacity_NoResize()
        {
            // Arrange
            var hashMap = new HashMap64<int>(10);
            var initialCapacity = hashMap.Capacity;

            // Act
            hashMap.ProvideCapacity(10);

            // Assert
            Assert.AreEqual(initialCapacity, hashMap.Capacity);
        }

        [Test]
        public void ProvideCapacity_GreaterThanLimitCapacity_PerformResize()
        {
            // Arrange
            var hashMap = new HashMap64<int>(10);
            var initialCapacity = hashMap.Capacity;

            // Act
            hashMap.ProvideCapacity(15);

            // Assert
            Assert.Greater(hashMap.Capacity, initialCapacity);
        }

        [Test]
        public void ProvideCapacity_NegativeTempIdCount_NoResize()
        {
            // Arrange
            var hashMap = new HashMap64<int>(10);
            var initialCapacity = hashMap.Capacity;

            // Act
            hashMap.ProvideCapacity(-5);

            // Assert
            Assert.AreEqual(initialCapacity, hashMap.Capacity);
        }
    }
}
