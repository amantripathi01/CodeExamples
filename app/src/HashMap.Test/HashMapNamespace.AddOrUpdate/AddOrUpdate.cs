// ********RoostGPT********
/*
Test generated by RoostGPT for test amanCsharp using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=AddOrUpdate_e137471c39
ROOST_METHOD_SIG_HASH=AddOrUpdate_c68693ab8d

   ########## Test-Scenarios ##########  

Scenario 1: Test AddOrUpdate with a new key-value pair

Details:
  TestName: TestAddOrUpdateWithNewKeyValuePair
  Description: The test will add a new key-value pair to the HashMap and checks if it returns true, which indicates that the pair is inserted.

Execution:
  Arrange: Create a HashMap and a key-value pair that does not exist in the HashMap.
  Act: Invoke the AddOrUpdate method with the new key-value pair.
  Assert: Check if the return value is true.

Validation:
  The assertion verifies that the AddOrUpdate method correctly inserts a new key-value pair into the HashMap and returns true. This test is significant as it ensures the method's capability to add new entries to the HashMap.

Scenario 2: Test AddOrUpdate with an existing key and a new value

Details:
  TestName: TestAddOrUpdateWithExistingKeyAndNewValue
  Description: The test will update the value of an existing key in the HashMap and checks if it returns false, which indicates that the value is updated, not inserted.

Execution:
  Arrange: Create a HashMap and add a key-value pair. Then, create a new value for the existing key.
  Act: Invoke the AddOrUpdate method with the existing key and new value.
  Assert: Check if the return value is false.

Validation:
  The assertion verifies that the AddOrUpdate method correctly updates the value of an existing key in the HashMap and returns false. This test is significant as it ensures the method's capability to update existing entries in the HashMap.

Scenario 3: Test AddOrUpdate when the HashMap is full

Details:
  TestName: TestAddOrUpdateWhenHashMapIsFull
  Description: The test will attempt to add a new key-value pair to a full HashMap and checks if it correctly resizes the HashMap to accommodate the new pair.

Execution:
  Arrange: Create a HashMap with a certain capacity and fill it up. Then, create a new key-value pair that does not exist in the HashMap.
  Act: Invoke the AddOrUpdate method with the new key-value pair.
  Assert: Check if the size of the HashMap has increased.

Validation:
  The assertion verifies that the AddOrUpdate method correctly resizes the HashMap when it is full and a new key-value pair is added. This test is significant as it ensures the method's capability to dynamically resize the HashMap.

Scenario 4: Test AddOrUpdate with null value

Details:
  TestName: TestAddOrUpdateWithNullValue
  Description: The test will add a key with a null value to the HashMap and checks if it correctly handles the null value.

Execution:
  Arrange: Create a HashMap and a key with a null value.
  Act: Invoke the AddOrUpdate method with the key and null value.
  Assert: Check if the HashMap contains the key and its associated value is null.

Validation:
  The assertion verifies that the AddOrUpdate method correctly handles null values. This test is significant as it ensures the method's robustness in handling null values, which are a common edge case in software development.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using HashMapNamespace;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class AddOrUpdateTest
    {
        private HashMap64<string> hashMap;

        [SetUp]
        public void Setup()
        {
            hashMap = new HashMap64<string>();
        }

        [Test]
        public void TestAddOrUpdateWithNewKeyValuePair()
        {
            bool result = hashMap.AddOrUpdate(1, "Value1");
            Assert.IsTrue(result);
            Assert.AreEqual("Value1", hashMap[1]);
        }

        [Test]
        public void TestAddOrUpdateWithExistingKeyAndNewValue()
        {
            hashMap.AddOrUpdate(1, "Value1");
            bool result = hashMap.AddOrUpdate(1, "Value2");
            Assert.IsFalse(result);
            Assert.AreEqual("Value2", hashMap[1]);
        }

        [Test]
        public void TestAddOrUpdateWhenHashMapIsFull()
        {
            for (long i = 0; i < 8; i++)
            {
                hashMap.AddOrUpdate(i, $"Value{i}");
            }
            bool result = hashMap.AddOrUpdate(8, "Value8");
            Assert.IsTrue(result);
            Assert.AreEqual("Value8", hashMap[8]);
        }

        [Test]
        public void TestAddOrUpdateWithNullValue()
        {
            bool result = hashMap.AddOrUpdate(1, null);
            Assert.IsTrue(result);
            Assert.IsNull(hashMap[1]);
        }

        [TearDown]
        public void TearDown()
        {
            hashMap = null;
        }
    }
}
